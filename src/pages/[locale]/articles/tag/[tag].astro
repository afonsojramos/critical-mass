---
export const prerender = true;

import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import ArticleCard from "@/components/ui/ArticleCard.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import * as m from "@/paraglide/messages";
import { capitalize } from "@/utils";
import { translateTag, createTagSlug } from "@/lib/tagMapper";

export async function getStaticPaths() {
  const allBlogArticles = await getCollection("blog");
  const paths = new Set();

  for (const article of allBlogArticles) {
    const locale = article.id.split("/")[0];
    for (const tag of article.data.tags) {
      // Use tag slug for URL
      const tagSlug = createTagSlug(tag);
      paths.add(JSON.stringify({ locale, tag: tagSlug }));
    }
  }

  return Array.from(paths).map((path) => {
    const { locale, tag } = JSON.parse(path as string);
    return {
      params: { locale, tag },
      props: { tag },
    };
  });
}

const { tag } = Astro.params;

if (!tag) {
  return Astro.redirect(`/${Astro.currentLocale}/articles`);
}

const allBlogArticles: CollectionEntry<"blog">[] = (await getCollection("blog")).sort(
  (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Filter articles by matching tag slug with actual tag
const tagArticles = allBlogArticles.filter((article) => 
  article.data.tags.some(articleTag => createTagSlug(articleTag) === tag)
);

// Get the actual English tag for translation (find first match)
const actualTag = allBlogArticles
  .flatMap(article => article.data.tags)
  .find(articleTag => createTagSlug(articleTag) === tag) || tag;

// Translate tag for display
const locale = Astro.currentLocale as 'pt' | 'en';
const displayTag = translateTag(actualTag, locale);
---

<MainLayout title={m.articles_tag()}>
  <main class="space-y-20 flex-grow">
    <div class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16 lg:px-3">
      <a
        href={`/${Astro.currentLocale}/articles`}
        class="inline-flex items-center font-medium text-black hover:text-green my-4"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          class="h-6 w-6"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M7 16l-4-4m0 0l4-4m-4 4h18"
          >
          </path>
        </svg>
        <span class="ml-1 font-bold text-lg">All Articles</span>
      </a>

      <h2 class="text-2xl pb-3">#{capitalize(displayTag)}</h2>
      <div class="grid gap-8 lg:grid-cols-2">
        {tagArticles.map((article) => <ArticleCard article={article} />)}
      </div>
    </div>
  </main>
</MainLayout>
