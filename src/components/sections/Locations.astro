---
import { getCollection } from "astro:content";
import Section from "@/components/sections/Section.astro";
import LocationCard from "@/components/ui/LocationCard.astro";
import SectionTitle from "@/components/ui/SectionTitle.astro";
import * as m from "@/paraglide/messages";

const locationsData = await getCollection("locations");
const locations = locationsData.sort((a, b) => a.data.index - b.data.index);

const cards = locations.map((location) => {
  const isSpecial = location.data.index === 100;

  // Build date string from components
  let dateText: string | undefined;
  if (location.data.customDate) {
    dateText = location.data.customDate;
  } else if (location.data.dateFrequency && location.data.dayOfWeek) {
    // Map day names to translation keys
    const dayMap: Record<string, () => string> = {
      Sunday: m.location_sunday,
      Monday: m.location_monday,
      Tuesday: m.location_tuesday,
      Wednesday: m.location_wednesday,
      Thursday: m.location_thursday,
      Friday: m.location_friday,
      Saturday: m.location_saturday,
    };

    // Map frequency to localized format with gender agreement
    const masculineDays = ["Sunday", "Saturday"];
    const isMasculine = masculineDays.includes(location.data.dayOfWeek);

    const frequencyMap: Record<string, string> = isMasculine
      ? {
          "1st": "1º",
          "2nd": "2º",
          "3rd": "3º",
          "4th": "4º",
          Last: "Último",
        }
      : {
          "1st": "1ª",
          "2nd": "2ª",
          "3rd": "3ª",
          "4th": "4ª",
          Last: "Última",
        };

    const dayTranslation = dayMap[location.data.dayOfWeek]?.() || location.data.dayOfWeek;
    const frequencyTranslation =
      frequencyMap[location.data.dateFrequency] || location.data.dateFrequency;
    dateText = `${frequencyTranslation} ${dayTranslation} ${m.location_ofEveryMonth()}`;
  }

  return {
    index: location.data.index,
    titleTop: isSpecial ? m.locations_moreComingSoon : location.data.city,
    titleBottom: isSpecial ? m.locations_createYourMovement : location.data.exactLocation,
    img: location.data.image,
    link: location.data.link,
    date: dateText,
  };
});
---

<Section id="locations">
  <div class="mt-24 mb-5">
    <SectionTitle
      sectionTitle={m.locations_title}
      description={m.locations_description}
    />
    <div class="grid grid-cols-1 md:grid-cols-2 gap-10">
      {
        cards.map((card) => (
          <LocationCard
            index={card.index}
            titleTop={card.titleTop}
            titleBottom={card.titleBottom}
            img={card.img}
            alt={card.titleTop}
            link={card.link}
            newLocation={card.index === 100}
            date={card.date}
          />
        ))
      }
    </div>
  </div>
</Section>
