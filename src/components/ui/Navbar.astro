---
import { Astronav } from "astro-navbar";
import LanguagePicker from "@/components/LanguagePicker.astro";
import { getRouteFromUrl } from "@/i18n/utils";
import * as m from "@/paraglide/messages";

const lang = Astro.currentLocale;
const url = getRouteFromUrl(Astro.url);

const menuitems = [
  // { href: "/about", label: "About us" },
  { href: `/${lang}/events`, label: m.nav_events },
  { href: `${url ? "/" : ""}#locations`, label: m.nav_locations },
  { href: `/${lang}/articles`, label: m.nav_blog },
];
---

<div class="mt-32 lg:mt-20">
  <nav class="w-full top-0 left-0 z-50 fixed bg-white">
    <header class="my-5 px-6 md:px-32">
      <Astronav>
        <div
          class="flex flex-col lg:flex-row lg:items-center lg:justify-between"
        >
          <!-- Logo section - left side on desktop -->
          <div class="flex w-full lg:w-1/4 items-center justify-between">
            <a href={`/${lang}`} class="flex items-center rtl:space-x-reverse">
              <img src="/logo.svg" class="size-24" alt="Logo" />
              <h1 class="text-3xl font-bold">
                {m.nav_home().toUpperCase()}
              </h1>
            </a>
            <div class="block lg:hidden">
              <div id="menu-icon" class="w-8 h-8 text-black cursor-pointer">
                <!-- Open (hamburger) icon -->
                <svg
                  id="open-icon"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  class="w-8 h-8"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 6h16M4 12h16M4 18h16"></path>
                </svg>
                <!-- Close (X) icon -->
                <svg
                  id="close-icon"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  class="w-8 h-8 hidden"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Menu items - centered on desktop -->
          <nav
            class="hidden w-full lg:flex lg:w-2/4 lg:justify-center"
            id="menu-items"
          >
            <ul
              class="font-medium flex flex-col p-4 lg:p-0 mt-4 border rounded-lg lg:flex-row lg:space-x-8 lg:mt-0 lg:border-0"
            >
              {
                menuitems.map((item) => (
                  <li class="content-center">
                    <a
                      href={item.href}
                      class="block py-2 px-3 text-black rounded lg:bg-transparent lg:p-0"
                      data-close-menu="true"
                    >
                      <span class="hidden lg:block">
                        {item
                          .label()
                          .split("\n")
                          .map((line: string) => (
                            <span class="block">{line}</span>
                          ))}
                      </span>
                      <span class="block lg:hidden">
                        {item.label().split("\n").join(" ")}
                      </span>
                    </a>
                  </li>
                ))
              }
              <li class="block lg:hidden">
                <div class="flex items-center justify-center py-2 px-3">
                  <LanguagePicker />
                </div>
              </li>
            </ul>
          </nav>

          <!-- Language picker - right side on desktop -->
          <div class="hidden lg:flex lg:w-1/4 lg:justify-end">
            <LanguagePicker />
          </div>
        </div>
      </Astronav>
    </header>
  </nav>
</div>

<script is:inline>
  // Get references to the menu icon, open/close icons, and menu items
  const menuIcon = document.getElementById("menu-icon");
  const openIcon = document.getElementById("open-icon");
  const closeIcon = document.getElementById("close-icon");
  const menuItems = document.getElementById("menu-items");
  const closeMenuItems = document.querySelectorAll('[data-close-menu="true"]'); // Select all items with the 'data-close-menu' attribute

  // Toggle the menu visibility and icon when the menu icon is clicked
  menuIcon.addEventListener("click", () => {
    menuItems.classList.toggle("hidden"); // Toggle the 'hidden' class on the menu

    // Toggle between open and close icons
    openIcon.classList.toggle("hidden");
    closeIcon.classList.toggle("hidden");
  });

  // Close the menu when any item is clicked
  closeMenuItems.forEach((item) => {
    item.addEventListener("click", () => {
      menuItems.classList.add("hidden"); // Add the 'hidden' class to hide the menu
      openIcon.classList.remove("hidden"); // Show the open (hamburger) icon
      closeIcon.classList.add("hidden"); // Hide the close (X) icon
    });
  });
</script>
