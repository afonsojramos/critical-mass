---
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<div id={id} class="image-modal fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center opacity-0 invisible transition-all duration-300 backdrop-blur-sm select-none" role="dialog" aria-modal="true">
  <div class="relative max-w-screen-lg max-h-[100vh] p-4 flex flex-col gap-4">
    <button class="absolute top-4 right-4 text-white text-4xl hover:text-gray-300 transition-colors z-10" aria-label="Close modal">
      &times;
    </button>
    <img class="max-w-full max-h-[calc(100vh-6rem)] object-contain flex-shrink-0 select-none pointer-events-none no-drag" id="modal-image" />
    <div class="text-white flex justify-between text-left select-none pointer-events-none">
      <h3 class="text-lg font-medium mb-2" id="modal-title"></h3>
      <a id="modal-author" class="text-sm text-gray-300 cursor-pointer"></a>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.querySelector('.image-modal') as HTMLElement;
    const modalImg = modal?.querySelector('#modal-image') as HTMLImageElement;
    const modalTitle = modal?.querySelector('#modal-title') as HTMLElement;
    const modalAuthor = modal?.querySelector('#modal-author') as HTMLElement;
    const closeBtn = modal?.querySelector('button') as HTMLButtonElement;

    function openModal(imageSrc: string, imageAlt: string, authorName?: string, authorLink?: string) {
      if (modal && modalImg && modalTitle && modalAuthor) {
        modalImg.src = imageSrc;
        modalImg.alt = imageAlt;
        modalTitle.textContent = imageAlt;

        // Handle author display
        if (authorName) {
          if (authorLink) {
            modalAuthor.innerHTML = `By <a href="${authorLink}" target="_blank" rel="noopener noreferrer" class="hover:text-white underline decoration-dotted underline-offset-2">${authorName}</a>`;
          } else {
            modalAuthor.innerHTML = `By ${authorName}`;
          }
        } else {
          modalAuthor.innerHTML = '';
        }

        modal.classList.remove('opacity-0', 'invisible');
        document.body.style.overflow = 'hidden';
      }
    }

    function closeModal() {
      if (modal) {
        modal.classList.add('opacity-0', 'invisible');
        document.body.style.overflow = '';
      }
    }

    closeBtn?.addEventListener('click', closeModal);

    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal && !modal.classList.contains('invisible')) {
        closeModal();
      }
    });

    window.openImageModal = openModal;
  });
</script>
