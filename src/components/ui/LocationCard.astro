---
import { Image } from "astro:assets";
import { parse } from "node-html-parser";
import gob from "@/assets/icons/icon6.svg";
import wob from "@/assets/icons/icon7.svg";
import Card from "@/components/ui/Card.astro";
import * as m from "@/paraglide/messages";

const { index, titleTop, titleBottom, date, img, alt, link, newLocation } = Astro.props;
const cityImages = import.meta.glob(`/src/assets/cities/*.svg`, {
  eager: true,
  query: "?raw",
  import: "default",
});

const getSVG = async (src: string) => {
  const filePath = `/src/assets${src}`;

  if (!(filePath in cityImages)) {
    throw new Error(`${filePath} not found`);
  }

  const root = parse(cityImages[filePath] as unknown as string);

  const svg = root.querySelector("svg") as unknown as SVGElement;
  const { attributes, innerHTML } = svg;

  return {
    attributes,
    innerHTML,
  };
};

const { attributes: svgAttributes, innerHTML } = await getSVG(img);
---

<Card isUnderline={true}>
  <div
    class={`h-[300px] w-full sm:h-full lg:gap-[60px] grid auto-cols-auto auto-rows-auto grid-cols-2 grid-rows-1 p-8 sm:p-[50px] gap-2 rounded-[45px] ${index % 3 === 1 ? 'bg-gray' : index % 3 === 2 ? 'bg-green' : 'bg-dark text-gray'} ${newLocation ? 'border-2 border-dashed border-green' : ''}`}
  >
    <h3 class={`flex flex-col col-span-2 lg:col-span-1 gap-1`}>
      <span
        class={`w-[fit-content] text-2xl ${index % 3 === 1 ? 'greenhead' : 'whitehead'}`}
      >
        {titleTop}
      </span>
      {date && (
        <span class={`w-[fit-content] ${index % 3 === 1 ? 'greenhead' : 'whitehead'}`}>{date}</span>
      )}
      <span
        class={`w-[fit-content] ${index % 3 === 1 ? 'greenhead' : 'whitehead'}`}
      >
        {titleBottom}
      </span>
    </h3>
    <picture
      class="w-full h-full row-span-1 order-1 lg:order-none lg:row-span-2 flex justify-center items-center lg:justify-end lg:items-end"
    >
        <svg {...svgAttributes} set:html={innerHTML} aria-label={alt} class={`object-cover ${newLocation ? 'h-16 w-16' : 'h-auto w-3/4'} ${index % 3 === 0 && 'fill-white'}`} />
    </picture>

    <div class="flex items-end">
      <a href={link} class="flex items-center gap-3.5">
        <Image src={index % 3 === 1 || index % 3 === 2 ? gob : wob} alt={alt} />
        <span class="hidden sm:block md:hidden lg:block"
          >{!newLocation ? m.events_serviceInfo : m.locations_sendEmail}</span
        >
      </a>
    </div>
  </div>
</Card>
